TODO:
- company index (the same as master company, but can't insert new) (DONE!)
- employee index (the same as master employee, but can't insert new) (DONE!)
- company detail (company id, name, list of employees) (DONE!)
- employee detail page (employee id, company, active, location, list of items held) (DONE!)
- add mutate function for items (DONE!)
- modify insert item to add mutation history (first item assignment) (DONE!)
- add mutation history index page (DONE!)
- add mutation history edit form (to update mutation status) (DONE!)
- add mutation history detail page (no need cause of the edit page)
- insert assembled items (DONE!)
- make sure get_max_id work as intended! (DONE!)
- modify insert assembled item to add mutation history (DONE!)

- update assembled item (DONE!)
- remove component assembled item (DONE!)
- add component to an assembled item (DONE!)
- assemble a new item from existing items (DONE!)
- then add mutate function for assembled_items (DONE!) (all the items inside of it are mutated as well)
- modify mutation history page to show assembled items as well (DONE!)
- modify mutation history page to show only item with part_of = 0 (DONE!)
- modify employee items held to show assembled item as well, and only item with part_of = 0 (DONE!)
- modify item page to show only item with part_of = 0 (DONE!)
- modify assembled item to show all assembled items (DONE!)
- add delete item (also delete all mutation history records) (just for admin)
  - test if assembled item still works well after its contained item is deleted
  - test if mutation history are correctly deleted
  (DONE!)
- add delete assembled item (delete all mutation history record, as well as all the item inside of it) (just for admin) (DONE!)
- do a full web-app test, try to find any errors that might exist (DONE!, check onenote.com for results)
- html_escape every views that uses database stored data that is filled from user inputs(DONE!)
- create help page that tells about
  - item_type-brand-model design
  - mutation between employee concept, NOT location concept
  (DONE!)
- ANCHORING: anchor every item_code to item detail, employee to employee detail, company to company detail (Probably done)
- REPORTING: utilize column selector and datatable print feature (DONE! ..sort of)
- Read barcode and redirect to item detail page (DONE!)
- Generate barcode images, print on 2 columns! (DONE!)
- Can select items to print (DONE!)
- Print barcode button in item detail page (DONE!)
- Reporting in item and assembled item mutation history (DONE!)
- Mutation history page don't load all immediately (datatable server side processing)
  - Kayaknya ga bisa dilakukan dengan tetap menggunakan datatable karena mutasi itu UNION, dan ga semua ke select
  - Ga terlalu penting sepertinya, total mutation history selama 2 tahun baru 2000an.
  - Coba test dengan 100rb data di mutation history, lalu jadikan argumen (Gagal, 5000 aja uda lambat)
  - DONE! Added query to select between 2 dates and limits result to a certain amount of records
  - Added to item detail and assembled item detail page as well (the mutations history)

- Items and assembled item also shouldn't all load immediately.
    filter by:
        location, (DONE!)
        purchase date, (DONE!)
        company_id, (DONE!)
        model_id (brand_id for assembled item) (DONE!)
    - Add to item index page, and assembled item index page (DONE!)
    - Also apply to the item table in employee detail page (NOT DONE, not really necessary?)
- Add item separate location independent of employee location
    This will change:
    - table structure of item/assembled item (add current loc, fsub, ssub) (DONE!)
    - table structure of mutation (add prev loc, fsub, ssub, and current loc, fsub, ssub) (DONE!)
    - Index page of item/assembled item (show location info)
        - Item (DONE!)
        - Assembled item (DONE!)
    - Detail page of item/assembled item (show location info)
        - Item (DONE!)
        - Assembled item (DONE!)
    - Item table in Employee detail page (show location info) (DONE!)
    - Index page of Mutation history (DONE!)
    - Mutation history in item detail page (DONE!)
    - Mutation history in assembled item detail page (DONE!)
    - Insert item/assembled item (form + controller logic)
        - Item (DONE!)
        - Assembled item (DONE!)
    - Update item/assembled item (form + controller logic) (location is not updatable, must from mutate, same as employee)
        - Item (DONE!)
        - Assembled item (DONE!)
    - Mutate item/assembled item (mutate form + controller logic)
        - Item (DONE!)
        - Assembled item (DONE!)
    - Adding item to assembled item logic (this process includes mutation, so we have to modify it too) (DONE!)
    - Removing item out of assembled item logic (this process includes mutation, so we have to modify it too) (DONE!)
    - Edit mutation form (logic still the same, just add prev_lov and destination info in form in read-only state) (DONE!)
    - Ini dilakukan sebagai solusi masalah kalau orang lari,
        kalau barangnya juga dibawa lari, berarti memang tidak ada solusi yg memungkinkan untuk itu
        kalau barangnya tidak dibawa lari, ada 2 kemungkinan,
            barang sama dia di lokasi terakhir dia (masih tercover)
            barang di tempat lain (tak tercover, tidak tau lokasi barang)
- Update help page! (DONE!)
- Add feature to select multiple item from the same employee to mutate (DONE!)
--- DONE ---

- User management (roles permission) (not really necessary, I think?)
    - Masters (automatic access to everything)
    - Item (Edit, view, delete, mutate)
    - Assembled item (Edit, view, delete, mutate)
    - Company (Edit, view)
    - Employee (Edit, view)
    - Mutation history (Edit, view)
    (Remove UI, and check access when address is typed)

    Create a table containing all the permissions that is possible to be had

    Create another table to allow each user id to have relations to multiple permissions
    Create an UI to edit user permssions

- Optimize query (not really necessary)
- dashboard with statistics as admin homepage (not really necessary)
==========

0. Pikirkan mengenai operating system, bagaimana seharusnya?
1. Pastikan mengenai employee punya current location, mungkin ke depannya tambahkan history mutasi employee.

2. Bagaimana item code seharusnya, dirubah apakah tidak apa?
Mengapa harus ada item type id? Bukankah sebenarnya item_id sendiri sudah cukup?

3. Mutasi barang yang tidak langsung sampai, apakah bakal lebih baik jika dimasukkan tabel delivery, lalu hanya
masukkan ke catatan mutasi ketika barang sampai? Setiap history delivery dicatat.
Tujuannya agar ada informasi lebih jelas kapan sebuah barang sampai. Bukan hanya kapan dikirim.
Karena saat ini, ketika barang received, yang dilakukan adalah update status mutasi dari on delivery ke received.

Solusi yg mungkin:
Tabel mutasi ada tanggal delivered dan tanggal received.
Utk kasus lsg received, kedua kolom ini isinya sama.
Utk kasus tidak lsg, maka bisa berbeda.


=========
Deskripsi:

Sistem pelabelan aset ini memiliki konsep mutasi yang berbeda dibanding sistem sebelumnya.
Sebelumnya, mutasi aset didefinisikan sebagai perpindahan aset dari suatu lokasi ke lokasi lain. Namun, sejalan dengan berjalannya sistem itu, disadari bahwa timbul suatu permasalahan utama, yaitu:

Ketika seorang karyawan berpindah lokasi, misalnya dari HQ level 4 ke HQ level 2, maka aset tersebut tidak ikut berpindah pada sistem, melainkan harus dipindahkan ke Gudang, kemudian kembali pada karyawan pada lokasi yang baru.

Hal ini memberikan suatu realisasi bahwa pelabelan aset dalam esensinya, tidak terlalu mementingkan sejarah lokasi aset tersebut, tetapi yang diutamakan adalah sejarah kepenanggungjawaban atas aset tersebut. Tidak terlalu penting untuk mengetahui mengenai suatu aset tertentu pernah berada di lokasi mana, saja tetapi yang lebih penting adalah untuk mengetahui siapa saja yang pernah bertanggung jawab atas suatu aset tersebut.

Sistem pelabelan aset ini mengikuti definisi mutasi yang baru. Mutasi aset didefinisikan sebagai perpindahan kepenanggungjawaban atas suatu aset dari seorang karyawan ke karyawan lain. Lokasi dari aset saat ini (current location) pun dapat dilihat dari lokasi karyawan yang memegang aset tersebut saat ini.

====
Masalah kedua yang dihadapi sistem pelabelan aset yang lama adalah dalam menangani item yang dapat dibongkar pasang. Sistem yang dikembangkan menangani permasalahan ini dengan menambahkan jenis item baru yang dapat dibongkar.

===
Masalah ketiga adalah pelaporan mutasi